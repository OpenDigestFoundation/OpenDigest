**summary**: 这篇文章在解决软件配置管理中代码合并时出现的合并冲突问题，特别是针对结构化合并工具在处理大型文件时存在的计算成本高昂和语言特定性的问题。

文章提出了一种名为Sesame的半结构化合并工具，该工具利用语言特定的语法分隔符来推断代码结构，无需完全解析，同时在预处理代码后利用非结构化工具合并低级别的结构。

与已有工作相比，Sesame在不牺牲半结构化合并工具的优势的同时，显著减少了虚假冲突的数量，并在减少总体报告的冲突数量以及存在冲突的文件数量上取得了进展，尽管它也像结构化工具一样，可能会遗漏一些实际的合并冲突。

这篇文章对软件工程领域有潜在的未来影响，因为它提供了一种改进的合并策略，可以在保持较高合并准确性的同时减少开发者在解决虚假冲突上的时间浪费，从而可能提高团队软件开发的效率和软件质量。此外，该工具的提出还可能激发更多利用语言特性来优化合并过程的研究。
**related work**: （Apel et al., 2011）Semistructured merge: Rethinking merge in revision control systems：提出了一种半结构化的合并方法，该方法部分利用了底层语言的语法结构和静态语义，但没有完全结构化合并的性能开销。

（Apel et al., 2012）Structured merge with auto-tuning: Balancing precision and performance：介绍了JDime，一个针对Java应用的先进结构化合并工具，它根据冲突的存在动态切换非结构化和结构化合并，优化合并过程。

（Lessenich et al., 2017）Renaming and shifted code in structured merging: Looking ahead for precision and performance：通过结合语法特定的前瞻来检测重构、更名和代码移动，显著提高了匹配精度。

（Zhu et al., 2019）AutoMerge：使用可调质量函数匹配节点，最大化质量函数以防止逻辑无关节点的匹配，减少了误报冲突。

（Larsen et al., 2022）Spork: Structured merge for java with formatting preservation：提出了Spork，一个针对Java的结构化合并工具，旨在通过在漂亮打印过程中重用输入文件的源代码来保留合并代码的格式。

（Shen et al., 2019）Intellimerge: a refactoring-aware software merging technique：引入了IntelliMerge，一个基于图的重构感知合并工具，可以减少合并冲突的数量，提高合并精度。

（Ellis et al., 2022）Operation-based refactoring-aware merging: An empirical evaluation：提出了RefMerge，一个基于操作的重构感知合并工具，记录代码变更的类型而不是简单的文本变更，支持多种重构类型。

（Souza et al., 2018）Verified three-way program merge：提出了SafeMerge，一个语义工具，通过结合轻量级依赖分析和精确的关系推理来检查合并程序是否引入了新的不期望行为。

（Zhang et al., 2022）Using pre-trained language models to resolve textual and semantic merge conflicts：介绍了GMERGE，一个利用预训练的大型语言模型（GPT-3）基于输入合并冲突和合并历史自动建议合并冲突解决方案的工具。

（Towqir et al., 2022）Detecting build conflicts in software merge for java programs via static analysis：提出了Bucond，一个通过将合并场景中的每个版本建模为图并比较这些图以提取与实体相关的编辑来避免合并后源代码构建错误的工具。
**approach**: 这篇文章的核心方法是Sesame，一个半结构化的合并工具，它利用语言特定的语法分隔符来提升合并的准确性，同时避免了全结构化合并工具的一些缺点。Sesame的核心思想是在不完全解析代码的情况下，通过识别和利用编程语言中的语法分隔符（例如Java中的'{'和'}'）来推断代码结构，从而在合并时更准确地检测和解决冲突。

Sesame的工作流程大致如下：

1. **预处理代码**：在合并低级语法结构（如方法体）之前，Sesame会在代码中的每个语言特定分隔符前后插入新行，并用特殊的占位符（例如'$'字符流）标记这些新行。

2. **调用非结构化合并工具**：对经过上述预处理的代码版本（基础版本、左侧版本和右侧版本）进行非结构化合并。

3. **后处理合并结果**：从非结构化合并的结果中移除在预处理步骤中添加的新行和占位符，生成最终的合并代码。

文章中并没有提到具体的算法或公式，但是Sesame的实现基于以下几个关键概念：

- **语法分隔符**：Sesame通过识别和利用编程语言中的语法分隔符来推断代码结构，而不是通过传统的AST（抽象语法树）节点匹配。

- **预处理**：Sesame通过在分隔符周围插入新行和占位符，改变了代码的布局，使得非结构化合并工具可以更容易地识别和合并不同开发者所做的更改。

- **冲突检测**：Sesame仅在尝试集成由分隔符界定的同一文本区域中的更改时报告冲突，而不是在任何尝试集成同一或连续行的更改时报告冲突。

- **错误分析**：Sesame通过减少误报（false positives）和漏报（false negatives）来提高合并冲突检测的准确性。

Sesame的这种方法在保持半结构化合并工具的优点（如易于实现和计算成本较低）的同时，减少了由于结构化不足而导致的合并准确性损失。通过这种方式，Sesame在合并过程中模拟了结构化合并工具的能力，同时避免了它们的一些缺点，如实现复杂性和计算成本高昂。
**experiment**: 这篇文章的实验数据对比说明了Sesame工具在减少合并冲突和提高合并准确性方面相较于标准半结构化和非结构化合并工具的改进。以下是具体的结果和分析：

1. **合并冲突数量的减少**：
   - 使用Sesame与非结构化合并工具diff3相比，合并冲突的数量减少了大约41%。
   - 与半结构化合并工具s3m相比，Sesame减少了大约13%的合并冲突。

2. **存在合并冲突的文件数量的减少**：
   - Sesame与diff3相比，减少了大约40%的存在合并冲突的文件数量。
   - 与s3m相比，Sesame减少了大约21%的存在合并冲突的文件数量。

3. **误报（False Positives）的减少**：
   - Sesame与diff3相比，减少了大约91%的误报合并冲突。
   - 与s3m相比，Sesame减少了大约88%的误报合并冲突。

4. **漏报（False Negatives）的情况**：
   - 尽管Sesame在减少误报方面表现出色，但它也遵循了结构化工具的趋势，即更有可能错过一些实际的合并冲突（漏报）。文章中指出，Sesame和s3m与diff3相比都显示出增加了漏报的数量。

5. **工具间结果的差异**：
   - 在9510个合并文件样本中，Sesame与diff3在大约12%的文件中有不同的合并结果。
   - Sesame与s3m在大约7%的文件中有不同的合并结果。

6. **具体数字**：
   - 在与diff3的比较中，Sesame将误报的数量从291减少到26，漏报的数量保持为0。
   - 在与s3m的比较中，Sesame将误报的数量从146减少到18，漏报的数量从1增加到48。

这些结果表明，Sesame在减少不必要的合并冲突和提高合并精度方面是有效的，尽管它也可能错过一些真正的合并冲突。这些发现支持了Sesame作为一种改进的合并工具的潜力，它结合了结构化合并工具的优势和非结构化工具的实用性。
**impact**: 这篇文章提出的Sesame工具及其半结构化合并方法可能对软件配置管理和版本控制系统领域产生以下影响：

1. **提高合并效率**：通过减少虚假冲突的数量，Sesame有助于开发者节省在解决非实质性合并问题上的时间，从而提高开发效率。

2. **增强合并工具的准确性**：Sesame通过使用语言特定的语法分隔符来改善合并冲突的检测，这可能会成为提高合并准确性的新标准。

3. **推动合并工具的发展**：该研究可能会激发更多关于如何利用编程语言的语法特性来优化合并过程的研究，推动合并工具技术的进步。

4. **改善开发者体验**：通过减少合并冲突的数量和提高合并的准确性，Sesame有助于改善开发者在使用版本控制系统时的体验。

5. **促进团队协作**：更有效的合并工具可以减少团队成员在合并代码时的摩擦，促进更顺畅的团队协作。

6. **减少软件缺陷**：通过减少在合并过程中可能引入的语法或语义错误，Sesame有助于减少软件缺陷，提高软件质量。

7. **作为其他工具的补充**：Sesame可以与现有的重构感知合并工具或其他类型的合并辅助工具结合使用，提供更全面的合并解决方案。

8. **教育和培训**：该研究的发现可能会被纳入软件工程的教育和培训课程，帮助学生和新开发者更好地理解软件合并的复杂性和挑战。

9. **影响开源项目**：由于开源项目通常涉及大量贡献者和频繁的代码合并，Sesame工具的引入可能会对这些项目的健康发展产生积极影响。

10. **促进实证研究**：这篇文章的方法和结果可能会鼓励进行更多的实证研究，以评估不同合并工具在不同编程语言和开发环境中的有效性。