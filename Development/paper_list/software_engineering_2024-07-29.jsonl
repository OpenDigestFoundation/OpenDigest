{"title": "AppWorld: A Controllable World of Apps and People for Benchmarking Interactive Coding Agents", "category": "cs.SE", "affiliation": "Stony Brook University, Assistant Professor, Computer Science, Stony Brook University", "updated_date": {"title": "AppWorld: A Controllable World of Apps and People for Benchmarking Interactive Coding Agents", "category": "cs.SE", "affiliation": "Stony Brook University, Assistant Professor, Computer Science, Stony Brook University", "updated_date": "2024-07-26 17:55:45+00:00", "author": "Harsh Trivedi", "director": "Niranjan Balasubramanian", "director_cited_count": 3756, "paper_link": "http://arxiv.org/abs/2407.18901v1", "abstract": "Autonomous agents that address day-to-day digital tasks (e.g., ordering\ngroceries for a household), must not only operate multiple apps (e.g., notes,\nmessaging, shopping app) via APIs, but also generate rich code with complex\ncontrol flow in an iterative manner based on their interaction with the\nenvironment. However, existing benchmarks for tool use are inadequate, as they\nonly cover tasks that require a simple sequence of API calls.\n  To remedy this gap, we built $\\textbf{AppWorld Engine}$, a high-quality\nexecution environment (60K lines of code) of 9 day-to-day apps operable via 457\nAPIs and populated with realistic digital activities simulating the lives of\n~100 fictitious users. We then created $\\textbf{AppWorld Benchmark}$ (40K lines\nof code), a suite of 750 natural, diverse, and challenging autonomous agent\ntasks requiring rich and interactive code generation. It supports robust\nprogrammatic evaluation with state-based unit tests, allowing for different\nways of completing a task while also checking for unexpected changes, i.e.,\ncollateral damage. The state-of-the-art LLM, GPT-4o, solves only ~49% of our\n'normal' tasks and ~30% of 'challenge' tasks, while other models solve at least\n16% fewer. This highlights the benchmark's difficulty and AppWorld's potential\nto push the frontiers of interactive coding agents. The project website is\navailable at https://appworld.dev/."}
{"title": "Semistructured Merge with Language-Specific Syntactic Separators", "category": "cs.SE", "affiliation": "Professor da \u00e1rea da Sa\u00fade Coletiva, Universidade Federal do Paran\u00e1, ", "updated_date": "2024-07-26 17:40:29+00:00", "author": "Guilherme Cavalcanti", "director": "Jonatas Clementino", "director_cited_count": 0, "paper_link": "http://arxiv.org/abs/2407.18888v1", "abstract": "Structured merge tools exploit programming language syntactic structure to\nenhance merge accuracy by reducing spurious conflicts reported by unstructured\ntools. By creating and handling full ASTs, structured tools are\nlanguage-specific and harder to implement. They can also be computationally\nexpensive when merging large files.To reduce these drawbacks, semistructured\nmerge tools work with partial ASTs that use strings to represent lower level\nsyntactic structures such as method bodies, and rely on unstructured tools to\nmerge them. This, however, results in merge accuracy loss. To improve accuracy\nwithout compromising semistructured merge benefits, we propose a tool that\nleverages language-specific syntactic separators to infer structure without\nparsing. We still resort to an unstructured tool to merge lower level\nstructures, but only after preprocessing the code so that text in between\nseparators such as curly braces appear in separate lines. This way we emulate\nthe capabilities of structured merge tools while avoiding their drawbacks. By\ncomparing our tool with a robust implementation of semistructured merge, we\nfind that our tool substantially reduces the number of spurious conflicts. We\nalso observe significant but less substantial reductions on the overall number\nof reported conflicts, and of files with conflicts. However, similar to\nstructured tools, our tool lets more merge conflicts go undetected. Our tool\nshows significant improvements over unstructured tools widely used in practice.\nFinally we observe that exploiting language-specific syntactic separators\nintroduces unique textual alignment challenges."}
{"title": "Code Structure-Aware through Line-level Semantic Learning for Code Vulnerability Detection", "category": "cs.SE", "affiliation": "The University of Queensland, Head, Dept of Cardiology, Guangdong CVInstitute, Guangdong Provincial People's Hospital \u2026", "updated_date": "2024-07-26 17:15:58+00:00", "author": "Ziliang Wang", "director": "Zhi Jin", "director_cited_count": 18424, "paper_link": "http://arxiv.org/abs/2407.18877v1", "abstract": "Different from the flow semantics of natural languages, programming languages\nare inherently rigid in structure and grammar. Existing fine-tuning\nmethodologies for code vulnerability detection generally treat code as long\ntext sequences, stripping away structural elements such as newlines ('/n') and\nwhitespace. However, this approach inadvertently results in the loss of crucial\nstructural information, diminishing the distinct characteristics of code and\nimpairing the accuracy of vulnerability detection. To address these challenges,\nwe propose a novel network architecture method based on pre-trained code\nmodels, which incorporates structural information awareness. We propose an\nenhanced code text processing workflow that retains structural elements prior\nto modeling. This refinement allows the model to retain and exploit line-level\nstructural information and semantic information during the modeling process.\nFurthermore, we introduce a new network architecture, the Code Structure-Aware\nNetwork through Line-level Semantic Learning (CSLS), which integrates three key\ncomponents: global vulnerability awareness, line-structural awareness, and\nsensitive-line awareness. We have conducted comprehensive experiments using\nvulnerability detection datasets from real-world projects. Extensive\nexperiments were conducted on vulnerability detection datasets derived from\nreal-world projects. The results demonstrate that our new code pre-processing\nflow significantly improves existing baselines (e.g., a 3\\% accuracy\nimprovement on the Devign dataset when applied to popular models such as\nCoderBert and UniXcoder). The proposed network architecture also demonstrates\nsuperior accuracy in detecting vulnerabilities, surpassing newly established\nbenchmarks. These findings underscore the importance of structural information\nin enhancing the efficacy of code vulnerability detection models."}
{"title": "Foundation Models for the Digital Twin Creation of Cyber-Physical Systems", "category": "cs.SE", "affiliation": "BJS Rampuria Jain law College, Bikaner, Lecturer and Researcher at Mondragon Unibertsitatea", "updated_date": "2024-07-26 14:40:32+00:00", "author": "Shaukat Ali", "director": "Aitor Arrieta", "director_cited_count": 870, "paper_link": "http://arxiv.org/abs/2407.18779v1", "abstract": "Foundation models are trained on a large amount of data to learn generic\npatterns. Consequently, these models can be used and fine-tuned for various\npurposes. Naturally, studying such models' use in the context of digital twins\nfor cyber-physical systems (CPSs) is a relevant area of investigation. To this\nend, we provide perspectives on various aspects within the context of\ndeveloping digital twins for CPSs, where foundation models can be used to\nincrease the efficiency of creating digital twins, improve the effectiveness of\nthe capabilities they provide, and used as specialized fine-tuned foundation\nmodels acting as digital twins themselves. We also discuss challenges in using\nfoundation models in a more generic context. We use the case of an autonomous\ndriving system as a representative CPS to give examples. Finally, we provide\ndiscussions and open research directions that we believe are valuable for the\ndigital twin community."}
{"title": "Evaluating Human Trajectory Prediction with Metamorphic Testing", "category": "cs.SE", "affiliation": "Simula Research Laboratory, Ma\u00eetre de conf\u00e9rence, LIRMM-CNRS, Universit\u00e9 de Montpellier 2", "updated_date": "2024-07-26 14:10:14+00:00", "author": "Helge Spieker", "director": "Nadjib Lazaar", "director_cited_count": 670, "paper_link": "http://arxiv.org/abs/2407.18756v1", "abstract": "The prediction of human trajectories is important for planning in autonomous\nsystems that act in the real world, e.g. automated driving or mobile robots.\nHuman trajectory prediction is a noisy process, and no prediction does\nprecisely match any future trajectory. It is therefore approached as a\nstochastic problem, where the goal is to minimise the error between the true\nand the predicted trajectory. In this work, we explore the application of\nmetamorphic testing for human trajectory prediction. Metamorphic testing is\ndesigned to handle unclear or missing test oracles. It is well-designed for\nhuman trajectory prediction, where there is no clear criterion of correct or\nincorrect human behaviour. Metamorphic relations rely on transformations over\nsource test cases and exploit invariants. A setting well-designed for human\ntrajectory prediction where there are many symmetries of expected human\nbehaviour under variations of the input, e.g. mirroring and rescaling of the\ninput data. We discuss how metamorphic testing can be applied to stochastic\nhuman trajectory prediction and introduce the Wasserstein Violation Criterion\nto statistically assess whether a follow-up test case violates a\nlabel-preserving metamorphic relation."}
{"title": "Multi-Robot System Architecture design in SysML and BPMN", "category": "cs.AI", "affiliation": "Imam Ja'afar Al-Sadiq University, ", "updated_date": "2024-07-26 14:04:40+00:00", "author": "Ahmed R. Sadik", "director": "Christian Goerick", "director_cited_count": 0, "paper_link": "http://arxiv.org/abs/2407.18749v1", "abstract": "Multi-Robot System (MRS) is a complex system that contains many different\nsoftware and hardware components. This main problem addressed in this article\nis the MRS design complexity. The proposed solution provides a modular modeling\nand simulation technique that is based on formal system engineering method,\ntherefore the MRS design complexity is decomposed and reduced. Modeling the MRS\nhas been achieved via two formal Architecture Description Languages (ADLs),\nwhich are Systems Modeling Language (SysML) and Business Process Model and\nNotation (BPMN), to design the system blueprints. By using those abstract\ndesign ADLs, the implementation of the project becomes technology agnostic.\nThis allows to transfer the design concept from on programming language to\nanother. During the simulation phase, a multi-agent environment is used to\nsimulate the MRS blueprints. The simulation has been implemented in Java Agent\nDevelopment (JADE) middleware. Therefore, its results can be used to analysis\nand verify the proposed MRS model in form of performance evaluation matrix."}
